spring.application.name=myfirstwebapp

#server.port=8081
#sayHello.jsp
#/WEB-INF/jsp/sayHello.jsp

# /WEB-INF/jsp/login.jsp => View Resolver
# /src/main/resources/META-INF/resources/  Spring is aware about this much part
spring.mvc.view.prefix=/WEB-INF/JSP/
spring.mvc.view.suffix=.jsp
logging.level.org.springframework=info
logging.level.com.in28minutes.springboot.myfirstwebapp=debug
spring.mvc.format.date=yyyy-MM-dd

#spring.datasource.url=jdbc:h2:mem:testdb

#spring.jpa.defer-datasource-initialization=true
spring.jpa.show-sql=true

##For offshore devlopment
#spring.datasource.url=jdbc:mysql://localhost:3306/todos
#spring.datasource.username=todos-user
#spring.datasource.password=dummytodos

##For deployment
spring.datasource.url=jdbc:mysql://34.131.222.30/new
#spring.jpa.properties.hibernate.default_schema=public
spring.cloud.gcp.sql.database-name=todos
spring.cloud.gcp.sql.instance-connection-name=task-manager-instance
spring.datasource.username=root
spring.datasource.password=password
spring.jpa.hibernate.ddl-auto=update

# So app starts despite "table already exists" errors.
spring.datasource.continue-on-error=true

# Enforces database initialization
spring.sql.init.mode=always

#To talk to mysql database
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

#Whenever we use in memory database then springboot creates tables automatically
#however when we connect to real time database then we need to mention to create tables
#spring.jpa.hibernate.ddl-auto=update

#docker run --detach --env MYSQL_ROOT_PASSWORD=dummypassword --env MYSQL_USER=todos-user --env MYSQL_PASSWORD=dummytodos --env MYSQL_DATABASE=todos --name mysql --publish 3306:3306 mysql:8-oracle
 
 
#\connect todos-user@localhost:3306

#
#spring.mail.host=smtp.gmail.com
#spring.mail.port=587
#spring.mail.username=sender@xyz.com
#spring.mail.password=uesixiljghclhvby
#spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.starttls.enable=true